#!/usr/bin/env python3from flask import Flask, Responsefrom transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGanfrom datasets import load_datasetimport torchimport soundfile as sf#import osfrom plivo import plivoxml#import loggingapp = Flask(__name__)# Load the SpeechT5 models and processorprocessor = SpeechT5Processor.from_pretrained("microsoft/speecht5_tts")model = SpeechT5ForTextToSpeech.from_pretrained("microsoft/speecht5_tts")vocoder = SpeechT5HifiGan.from_pretrained("microsoft/speecht5_hifigan")# Load speaker embeddings from a datasetembeddings_dataset = load_dataset("Matthijs/cmu-arctic-xvectors", split="validation")speaker_embeddings = torch.tensor(embeddings_dataset[7306]["xvector"]).unsqueeze(0)def generate_audio(text):    # Process the input text to obtain model-readable input    inputs = processor(text=text, return_tensors="pt")    # Generate speech using the SpeechT5 model with the specified speaker embeddings    speech = model.generate_speech(inputs.input_ids, speaker_embeddings, vocoder=vocoder)    return speech.numpy()@app.route('/receive_call/', methods=['GET', 'POST'])def speak_xml():        text_to_speak = """"Congratulations! You've won a prize, but to claim it,     you need to pay a small processing fee."    """    # Generate the audio using the SpeechT5 model    audio_data = generate_audio(text_to_speak)    # Save the audio as a WAV file    audio_path = "static/speech.wav"    sf.write(audio_path, audio_data, samplerate=16000)        # Get the publicly accessible URL for the audio file using ngrok    ngrok_url = "https://051e-2600-4041-529a-9700-156-61ce-7d0-e0ae.ngrok-free.app/"    audio_url = f"{ngrok_url}/static/speech.wav"    # Create the Plivo XML response    response = plivoxml.ResponseElement()    response.add(plivoxml.PlayElement(audio_url))    return Response(response.to_string(), mimetype='application/xml')if __name__ == "__main__":    app.run(host='0.0.0.0', port=3000, debug=True)